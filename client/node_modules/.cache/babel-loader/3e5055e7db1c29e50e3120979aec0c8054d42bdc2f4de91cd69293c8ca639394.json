{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\DELL\\\\OneDrive\\\\Documents\\\\GitHub\\\\Gear\\\\client\\\\src\\\\components\\\\ChannelSearch.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { useChatContext } from 'stream-chat-react';\n\n//Images\nimport { SearchIcon } from '../assets';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ChannelSearch = () => {\n  _s();\n  const [query, setQuery] = useState('');\n  const [loading, setLoading] = useState('false'); //At start our loading will be set to false\n\n  const getChannels = async text => {\n    //using async function as we have to wait the channel to be fetched..\n    //using try and catch here to find the channel or it will return an error..\n    try {\n      //To fetch channels\n    } catch (error) {\n      setQuery('');\n    }\n  };\n  const onSearch = event => {\n    //need to apply this venry time when we have buttons as the usual browser behaviour is not instantaneous and we are using react \n    //so we use this to keep the page smooth on refresh\n    event.preventDefault();\n    setLoading(true);\n    setQuery(event.target.value);\n    getChannels(event.target.value);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"channel-search__container\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"channel-search__input__wrapper\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"channel-search__input__icon\",\n        children: /*#__PURE__*/_jsxDEV(SearchIcon, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 34,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 33,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        className: \"channel-search__input__text\",\n        placeholder: \"Search\",\n        type: \"text\",\n        value: query,\n        onChange: onSearch\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 36,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 31,\n    columnNumber: 9\n  }, this);\n};\n_s(ChannelSearch, \"TbggqF+MrFJmvNWMqBoId4fpDFo=\");\n_c = ChannelSearch;\nexport default ChannelSearch;\nvar _c;\n$RefreshReg$(_c, \"ChannelSearch\");","map":{"version":3,"names":["React","useState","useEffect","useChatContext","SearchIcon","jsxDEV","_jsxDEV","ChannelSearch","_s","query","setQuery","loading","setLoading","getChannels","text","error","onSearch","event","preventDefault","target","value","className","children","fileName","_jsxFileName","lineNumber","columnNumber","placeholder","type","onChange","_c","$RefreshReg$"],"sources":["C:/Users/DELL/OneDrive/Documents/GitHub/Gear/client/src/components/ChannelSearch.jsx"],"sourcesContent":["import React,{useState,useEffect}from 'react';\r\nimport { useChatContext } from 'stream-chat-react';\r\n\r\n\r\n//Images\r\nimport {SearchIcon} from '../assets';\r\n\r\nconst ChannelSearch =() => {\r\n    const [query,setQuery] = useState('');\r\n    const [loading,setLoading] = useState('false');//At start our loading will be set to false\r\n     \r\n    const getChannels = async (text) => {    \r\n        //using async function as we have to wait the channel to be fetched..\r\n        //using try and catch here to find the channel or it will return an error..\r\n        try{\r\n            //To fetch channels\r\n           } catch(error){\r\n            setQuery('')\r\n        }\r\n    };\r\n\r\n    const onSearch = (event) => {\r\n        //need to apply this venry time when we have buttons as the usual browser behaviour is not instantaneous and we are using react \r\n        //so we use this to keep the page smooth on refresh\r\n        event.preventDefault();    \r\n       setLoading(true);\r\n       setQuery(event.target.value);\r\n       getChannels(event.target.value);\r\n    }\r\n    return (\r\n        <div className=\"channel-search__container\">\r\n            <div className=\"channel-search__input__wrapper\">\r\n                <div className=\"channel-search__input__icon\">\r\n                    <SearchIcon/>\r\n                </div>\r\n                < input className=\"channel-search__input__text\" \r\n                placeholder=\"Search\" \r\n                type=\"text\" \r\n                value={query}\r\n                onChange={onSearch}\r\n                \r\n                />\r\n            </div>\r\n\r\n        </div>\r\n    )\r\n}\r\n \r\nexport default ChannelSearch;"],"mappings":";;AAAA,OAAOA,KAAK,IAAEC,QAAQ,EAACC,SAAS,QAAM,OAAO;AAC7C,SAASC,cAAc,QAAQ,mBAAmB;;AAGlD;AACA,SAAQC,UAAU,QAAO,WAAW;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAErC,MAAMC,aAAa,GAAEA,CAAA,KAAM;EAAAC,EAAA;EACvB,MAAM,CAACC,KAAK,EAACC,QAAQ,CAAC,GAAGT,QAAQ,CAAC,EAAE,CAAC;EACrC,MAAM,CAACU,OAAO,EAACC,UAAU,CAAC,GAAGX,QAAQ,CAAC,OAAO,CAAC,CAAC;;EAE/C,MAAMY,WAAW,GAAG,MAAOC,IAAI,IAAK;IAChC;IACA;IACA,IAAG;MACC;IAAA,CACA,CAAC,OAAMC,KAAK,EAAC;MACbL,QAAQ,CAAC,EAAE,CAAC;IAChB;EACJ,CAAC;EAED,MAAMM,QAAQ,GAAIC,KAAK,IAAK;IACxB;IACA;IACAA,KAAK,CAACC,cAAc,CAAC,CAAC;IACvBN,UAAU,CAAC,IAAI,CAAC;IAChBF,QAAQ,CAACO,KAAK,CAACE,MAAM,CAACC,KAAK,CAAC;IAC5BP,WAAW,CAACI,KAAK,CAACE,MAAM,CAACC,KAAK,CAAC;EAClC,CAAC;EACD,oBACId,OAAA;IAAKe,SAAS,EAAC,2BAA2B;IAAAC,QAAA,eACtChB,OAAA;MAAKe,SAAS,EAAC,gCAAgC;MAAAC,QAAA,gBAC3ChB,OAAA;QAAKe,SAAS,EAAC,6BAA6B;QAAAC,QAAA,eACxChB,OAAA,CAACF,UAAU;UAAAmB,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAC;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACZ,CAAC,eACNpB,OAAA;QAAQe,SAAS,EAAC,6BAA6B;QAC/CM,WAAW,EAAC,QAAQ;QACpBC,IAAI,EAAC,MAAM;QACXR,KAAK,EAAEX,KAAM;QACboB,QAAQ,EAAEb;MAAS;QAAAO,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAElB,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACD;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAEL,CAAC;AAEd,CAAC;AAAAlB,EAAA,CAvCKD,aAAa;AAAAuB,EAAA,GAAbvB,aAAa;AAyCnB,eAAeA,aAAa;AAAC,IAAAuB,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}